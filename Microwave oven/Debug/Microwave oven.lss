
Microwave oven.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000002e6  0000037a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080006a  0080006a  00000384  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000384  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000ad5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000161  00000000  00000000  00000af5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000002e1  00000000  00000000  00000c56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000117  00000000  00000000  00000f37  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000292  00000000  00000000  0000104e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000100  00000000  00000000  000012e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001b5  00000000  00000000  000013e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000002a  00000000  00000000  00001595  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__vector_1>
   8:	0c 94 30 01 	jmp	0x260	; 0x260 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ee       	ldi	r30, 0xE6	; 230
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 37       	cpi	r26, 0x71	; 113
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 24 01 	call	0x248	; 0x248 <main>
  8a:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_oven>:
enum PROCESS{RUN , PUSED , END , NONE};

enum PROCESS MY_PROCESS ;

void init_oven()
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	DDRC =0xFF; //SEVEN SEG DATA(OUT)
  9a:	84 e3       	ldi	r24, 0x34	; 52
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	fc 01       	movw	r30, r24
  a2:	20 83       	st	Z, r18
	DDRA =0XFF; //PERIPHRAL, SEVEN SEG ADDR(OUT)
  a4:	8a e3       	ldi	r24, 0x3A	; 58
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	2f ef       	ldi	r18, 0xFF	; 255
  aa:	fc 01       	movw	r30, r24
  ac:	20 83       	st	Z, r18
	DDRD =0X00;	//BUTTONS (IN)
  ae:	81 e3       	ldi	r24, 0x31	; 49
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	fc 01       	movw	r30, r24
  b4:	10 82       	st	Z, r1
	PORTD =0XFF; //TURN ON PULUP RESISTANTS
  b6:	82 e3       	ldi	r24, 0x32	; 50
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	fc 01       	movw	r30, r24
  be:	20 83       	st	Z, r18
	
	MY_PROCESS =NONE ;
  c0:	83 e0       	ldi	r24, 0x03	; 3
  c2:	80 93 70 00 	sts	0x0070, r24
	
	// INIT THE EXTERNAL INTRUPPT => INIT0 "any change ",INIT1 "FULLING adge" 
}
  c6:	cf 91       	pop	r28
  c8:	df 91       	pop	r29
  ca:	08 95       	ret

000000cc <INIT_RTC>:
void INIT_RTC()
{
  cc:	df 93       	push	r29
  ce:	cf 93       	push	r28
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
	
}
  d4:	cf 91       	pop	r28
  d6:	df 91       	pop	r29
  d8:	08 95       	ret

000000da <INC_RTC>:

void INC_RTC()
{
  da:	df 93       	push	r29
  dc:	cf 93       	push	r28
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
	
}
  e2:	cf 91       	pop	r28
  e4:	df 91       	pop	r29
  e6:	08 95       	ret

000000e8 <INC_SW>:

void INC_SW()
{
  e8:	df 93       	push	r29
  ea:	cf 93       	push	r28
  ec:	cd b7       	in	r28, 0x3d	; 61
  ee:	de b7       	in	r29, 0x3e	; 62
	
}
  f0:	cf 91       	pop	r28
  f2:	df 91       	pop	r29
  f4:	08 95       	ret

000000f6 <DEC_SW>:
void DEC_SW()
{
  f6:	df 93       	push	r29
  f8:	cf 93       	push	r28
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
	
}
  fe:	cf 91       	pop	r28
 100:	df 91       	pop	r29
 102:	08 95       	ret

00000104 <display_2_digit>:

//display 2 digit
void display_2_digit(uint8_t num ,uint8_t seg1,uint8_t seg2)
{
 104:	df 93       	push	r29
 106:	cf 93       	push	r28
 108:	cd b7       	in	r28, 0x3d	; 61
 10a:	de b7       	in	r29, 0x3e	; 62
 10c:	2d 97       	sbiw	r28, 0x0d	; 13
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	f8 94       	cli
 112:	de bf       	out	0x3e, r29	; 62
 114:	0f be       	out	0x3f, r0	; 63
 116:	cd bf       	out	0x3d, r28	; 61
 118:	8b 87       	std	Y+11, r24	; 0x0b
 11a:	6c 87       	std	Y+12, r22	; 0x0c
 11c:	4d 87       	std	Y+13, r20	; 0x0d
	uint8_t nums[] ={num_0,num_1,num_2,num_3,num_4,num_5,num_6,num_7,num_8,num_9};
 11e:	ce 01       	movw	r24, r28
 120:	01 96       	adiw	r24, 0x01	; 1
 122:	20 e6       	ldi	r18, 0x60	; 96
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	4a e0       	ldi	r20, 0x0A	; 10
 128:	f9 01       	movw	r30, r18
 12a:	00 80       	ld	r0, Z
 12c:	2f 5f       	subi	r18, 0xFF	; 255
 12e:	3f 4f       	sbci	r19, 0xFF	; 255
 130:	fc 01       	movw	r30, r24
 132:	00 82       	st	Z, r0
 134:	01 96       	adiw	r24, 0x01	; 1
 136:	41 50       	subi	r20, 0x01	; 1
 138:	44 23       	and	r20, r20
 13a:	b1 f7       	brne	.-20     	; 0x128 <display_2_digit+0x24>
	seven_seg_data_port =nums[(num %10)];	
 13c:	25 e3       	ldi	r18, 0x35	; 53
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	8b 85       	ldd	r24, Y+11	; 0x0b
 142:	9a e0       	ldi	r25, 0x0A	; 10
 144:	69 2f       	mov	r22, r25
 146:	0e 94 65 01 	call	0x2ca	; 0x2ca <__udivmodqi4>
 14a:	89 2f       	mov	r24, r25
 14c:	88 2f       	mov	r24, r24
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	ae 01       	movw	r20, r28
 152:	4f 5f       	subi	r20, 0xFF	; 255
 154:	5f 4f       	sbci	r21, 0xFF	; 255
 156:	84 0f       	add	r24, r20
 158:	95 1f       	adc	r25, r21
 15a:	fc 01       	movw	r30, r24
 15c:	80 81       	ld	r24, Z
 15e:	f9 01       	movw	r30, r18
 160:	80 83       	st	Z, r24
	seven_seg_addr_port =seg2;
 162:	8b e3       	ldi	r24, 0x3B	; 59
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	2d 85       	ldd	r18, Y+13	; 0x0d
 168:	fc 01       	movw	r30, r24
 16a:	20 83       	st	Z, r18
	num/=10;
 16c:	8b 85       	ldd	r24, Y+11	; 0x0b
 16e:	9a e0       	ldi	r25, 0x0A	; 10
 170:	69 2f       	mov	r22, r25
 172:	0e 94 65 01 	call	0x2ca	; 0x2ca <__udivmodqi4>
 176:	8b 87       	std	Y+11, r24	; 0x0b
	seven_seg_data_port =nums[(num %10)];
 178:	25 e3       	ldi	r18, 0x35	; 53
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	8b 85       	ldd	r24, Y+11	; 0x0b
 17e:	9a e0       	ldi	r25, 0x0A	; 10
 180:	69 2f       	mov	r22, r25
 182:	0e 94 65 01 	call	0x2ca	; 0x2ca <__udivmodqi4>
 186:	89 2f       	mov	r24, r25
 188:	88 2f       	mov	r24, r24
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	ae 01       	movw	r20, r28
 18e:	4f 5f       	subi	r20, 0xFF	; 255
 190:	5f 4f       	sbci	r21, 0xFF	; 255
 192:	84 0f       	add	r24, r20
 194:	95 1f       	adc	r25, r21
 196:	fc 01       	movw	r30, r24
 198:	80 81       	ld	r24, Z
 19a:	f9 01       	movw	r30, r18
 19c:	80 83       	st	Z, r24
	if(seg2 == s2)  sbi(seven_seg_data_port,dp); 
 19e:	8d 85       	ldd	r24, Y+13	; 0x0d
 1a0:	81 30       	cpi	r24, 0x01	; 1
 1a2:	49 f4       	brne	.+18     	; 0x1b6 <display_2_digit+0xb2>
 1a4:	85 e3       	ldi	r24, 0x35	; 53
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	25 e3       	ldi	r18, 0x35	; 53
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	f9 01       	movw	r30, r18
 1ae:	20 81       	ld	r18, Z
 1b0:	20 68       	ori	r18, 0x80	; 128
 1b2:	fc 01       	movw	r30, r24
 1b4:	20 83       	st	Z, r18
	seven_seg_addr_port =seg1;
 1b6:	8b e3       	ldi	r24, 0x3B	; 59
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	2c 85       	ldd	r18, Y+12	; 0x0c
 1bc:	fc 01       	movw	r30, r24
 1be:	20 83       	st	Z, r18
}
 1c0:	2d 96       	adiw	r28, 0x0d	; 13
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	f8 94       	cli
 1c6:	de bf       	out	0x3e, r29	; 62
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	cd bf       	out	0x3d, r28	; 61
 1cc:	cf 91       	pop	r28
 1ce:	df 91       	pop	r29
 1d0:	08 95       	ret

000001d2 <display_rtc>:

void display_rtc()
{
 1d2:	df 93       	push	r29
 1d4:	cf 93       	push	r28
 1d6:	cd b7       	in	r28, 0x3d	; 61
 1d8:	de b7       	in	r29, 0x3e	; 62
	display_2_digit(RT_HOURS,s1,s2);
 1da:	80 91 6d 00 	lds	r24, 0x006D
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	41 e0       	ldi	r20, 0x01	; 1
 1e2:	0e 94 82 00 	call	0x104	; 0x104 <display_2_digit>
	display_2_digit(RT_minutes,s3,s4);
 1e6:	80 91 6c 00 	lds	r24, 0x006C
 1ea:	62 e0       	ldi	r22, 0x02	; 2
 1ec:	43 e0       	ldi	r20, 0x03	; 3
 1ee:	0e 94 82 00 	call	0x104	; 0x104 <display_2_digit>
}
 1f2:	cf 91       	pop	r28
 1f4:	df 91       	pop	r29
 1f6:	08 95       	ret

000001f8 <display_sw>:

void display_sw()
{
 1f8:	df 93       	push	r29
 1fa:	cf 93       	push	r28
 1fc:	cd b7       	in	r28, 0x3d	; 61
 1fe:	de b7       	in	r29, 0x3e	; 62
	display_2_digit(stop_watch_minutes,s1,s2);
 200:	80 91 6f 00 	lds	r24, 0x006F
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	41 e0       	ldi	r20, 0x01	; 1
 208:	0e 94 82 00 	call	0x104	; 0x104 <display_2_digit>
	display_2_digit(stop_watch_second,s3,s4);
 20c:	80 91 6e 00 	lds	r24, 0x006E
 210:	62 e0       	ldi	r22, 0x02	; 2
 212:	43 e0       	ldi	r20, 0x03	; 3
 214:	0e 94 82 00 	call	0x104	; 0x104 <display_2_digit>
}
 218:	cf 91       	pop	r28
 21a:	df 91       	pop	r29
 21c:	08 95       	ret

0000021e <END_PROCESS>:
void END_PROCESS()
{
 21e:	df 93       	push	r29
 220:	cf 93       	push	r28
 222:	cd b7       	in	r28, 0x3d	; 61
 224:	de b7       	in	r29, 0x3e	; 62
	/*
	turn off Oven_indicator_led 
	turn off twist_motor
	chang state of procces
	*/
}
 226:	cf 91       	pop	r28
 228:	df 91       	pop	r29
 22a:	08 95       	ret

0000022c <START_PROCESS>:

void START_PROCESS()
{
 22c:	df 93       	push	r29
 22e:	cf 93       	push	r28
 230:	cd b7       	in	r28, 0x3d	; 61
 232:	de b7       	in	r29, 0x3e	; 62
	/*
	turn on Oven_indicator_led 
	turn on twist_motor
	chang state of procces
	*/
}
 234:	cf 91       	pop	r28
 236:	df 91       	pop	r29
 238:	08 95       	ret

0000023a <SYSTEM_PUSE>:

void SYSTEM_PUSE()
{
 23a:	df 93       	push	r29
 23c:	cf 93       	push	r28
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	de b7       	in	r29, 0x3e	; 62
	//TURN MOTOR OF 
	//pose stop watch timer 
}
 242:	cf 91       	pop	r28
 244:	df 91       	pop	r29
 246:	08 95       	ret

00000248 <main>:
int main(void)
{
 248:	df 93       	push	r29
 24a:	cf 93       	push	r28
 24c:	cd b7       	in	r28, 0x3d	; 61
 24e:	de b7       	in	r29, 0x3e	; 62
	sei();
 250:	78 94       	sei
	init_oven();
 252:	0e 94 49 00 	call	0x92	; 0x92 <init_oven>
	INIT_RTC();
 256:	0e 94 66 00 	call	0xcc	; 0xcc <INIT_RTC>
    while(1)
    {
		if (AD_T_MODE)
 25a:	80 91 6a 00 	lds	r24, 0x006A
		else
		{
			
		}
		
    }
 25e:	fd cf       	rjmp	.-6      	; 0x25a <main+0x12>

00000260 <__vector_2>:
}
ISR(INT1_vect)
{
 260:	1f 92       	push	r1
 262:	0f 92       	push	r0
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	0f 92       	push	r0
 268:	11 24       	eor	r1, r1
 26a:	8f 93       	push	r24
 26c:	df 93       	push	r29
 26e:	cf 93       	push	r28
 270:	cd b7       	in	r28, 0x3d	; 61
 272:	de b7       	in	r29, 0x3e	; 62
	//T_Adj_Bn IS PRESSED
	AD_T_MODE = 1 ;
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	80 93 6a 00 	sts	0x006A, r24
}
 27a:	cf 91       	pop	r28
 27c:	df 91       	pop	r29
 27e:	8f 91       	pop	r24
 280:	0f 90       	pop	r0
 282:	0f be       	out	0x3f, r0	; 63
 284:	0f 90       	pop	r0
 286:	1f 90       	pop	r1
 288:	18 95       	reti

0000028a <__vector_1>:

ISR(INT0_vect)
{
 28a:	1f 92       	push	r1
 28c:	0f 92       	push	r0
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	0f 92       	push	r0
 292:	11 24       	eor	r1, r1
 294:	df 93       	push	r29
 296:	cf 93       	push	r28
 298:	cd b7       	in	r28, 0x3d	; 61
 29a:	de b7       	in	r29, 0x3e	; 62
	DOOR IS OPEN or CLOSED 
	toggle  state of door
	door_is_open = ! door_is_open;
	if PROCESS END => chang stat to NONE
	*/
}
 29c:	cf 91       	pop	r28
 29e:	df 91       	pop	r29
 2a0:	0f 90       	pop	r0
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	0f 90       	pop	r0
 2a6:	1f 90       	pop	r1
 2a8:	18 95       	reti

000002aa <__vector_9>:

ISR(TIMER1_OVF_vect)
{
 2aa:	1f 92       	push	r1
 2ac:	0f 92       	push	r0
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	0f 92       	push	r0
 2b2:	11 24       	eor	r1, r1
 2b4:	df 93       	push	r29
 2b6:	cf 93       	push	r28
 2b8:	cd b7       	in	r28, 0x3d	; 61
 2ba:	de b7       	in	r29, 0x3e	; 62
	/*
	INC_RTC
	if PROCESS RUN => DEC_SW 
	if PROCESS END => beep
	*/
 2bc:	cf 91       	pop	r28
 2be:	df 91       	pop	r29
 2c0:	0f 90       	pop	r0
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	0f 90       	pop	r0
 2c6:	1f 90       	pop	r1
 2c8:	18 95       	reti

000002ca <__udivmodqi4>:
 2ca:	99 1b       	sub	r25, r25
 2cc:	79 e0       	ldi	r23, 0x09	; 9
 2ce:	04 c0       	rjmp	.+8      	; 0x2d8 <__udivmodqi4_ep>

000002d0 <__udivmodqi4_loop>:
 2d0:	99 1f       	adc	r25, r25
 2d2:	96 17       	cp	r25, r22
 2d4:	08 f0       	brcs	.+2      	; 0x2d8 <__udivmodqi4_ep>
 2d6:	96 1b       	sub	r25, r22

000002d8 <__udivmodqi4_ep>:
 2d8:	88 1f       	adc	r24, r24
 2da:	7a 95       	dec	r23
 2dc:	c9 f7       	brne	.-14     	; 0x2d0 <__udivmodqi4_loop>
 2de:	80 95       	com	r24
 2e0:	08 95       	ret

000002e2 <_exit>:
 2e2:	f8 94       	cli

000002e4 <__stop_program>:
 2e4:	ff cf       	rjmp	.-2      	; 0x2e4 <__stop_program>
